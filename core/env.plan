(dict-define! @ 'define (vau (symbol value) env
                             (dict-define! env symbol (eval env value))))

(define if (vau ($cond $if-true $if-false) env
                (eval env (bool (eval env $cond) $if-true $if-false))))

(define list (vau arguments env
                  (if (null? arguments)
                    ()
                    (cons (eval env (car arguments))
                          (operate env list (cdr arguments))))))

(define wrap (vau (operative) definition-env
                  (vau arguments calling-env
                       (operate calling-env
                                (eval definition-env operative)
                                (operate calling-env list arguments)))))

(define lambda (vau (params body) definition-env
                    (wrap (eval definition-env
                                (list vau params '_ body)))))

(define last (lambda (l)
               (if (null? (cdr l))
                 (car l)
                 (last (cdr l)))))

(define begin last)

(define lambda ((lambda (lambda)
                  (vau (parameters . body) env
                       (eval env (list lambda parameters (cons begin body)))))
                lambda))


(define caar (lambda (l) env (car (car l))))
(define cadr (lambda (l) env (car (cdr l))))

(define map (lambda (f l)
              (if (null? l)
                ()
                (cons (f (car l))
                      (map f (cdr l))))))

(define quote (vau (value) env value))

(define apply (wrap (vau (operative arguments) env
                    (eval env (cons operative
                                    (map (lambda (x) (list quote x))
                                         arguments))))))

(define else #t)

(define cond (vau (case . cases) env
                  (if (eval env (car case))
                    (eval env (cadr case))
                    (if (null? cases)
                      ()
                      (eval env (cons cond cases))))))

(define or (vau (expr . exprs) env (cond
                                     ((eval env expr) #t)
                                     ((null? exprs) #f)
                                     (else (eval env (cons or exprs))))))

(define >= (lambda (a b) (or (eq? a b) (> a b))))
(define <= (lambda (a b) (or (eq? a b) (< a b))))
